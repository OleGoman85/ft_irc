#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import socket
import time


GREEN = "\033[1;32m"
RED   = "\033[1;31m"
YELLOW= "\033[1;33m"
BLUE  = "\033[1;34m"
RESET = "\033[0m"


SERVER_PORT = 6667
SERVER_PASSWORD = "password"

failed_tests_count = 0 

def print_header(text):
    print(f"\n{YELLOW}{'='*50}\nüìå {text}\n{'='*50}{RESET}")

def print_result(success, message, received=""):
    global failed_tests_count
    if success:
        print(f"{GREEN}[‚úÖ] {message} PASSED!{RESET}")
    else:
        print(f"{RED}[‚ùå] {message} FAILED!{RESET}")
        if received:
            print(f"{RED}     ‚è™ Server response: {received}{RESET}")
        failed_tests_count += 1

def create_client():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(('127.0.0.1', SERVER_PORT))
    s.settimeout(2)
    return s

def send_command(client, command):
    full_command = command + "\r\n"
    client.sendall(full_command.encode())

def recv_response(client):
    try:
        return client.recv(4096).decode().strip()
    except socket.timeout:
        return ""

def flush_recv(client):
    try:
        while True:
            client.recv(4096)
    except:
        pass

def register_client(client, nick, user, realname):
    send_command(client, f"PASS {SERVER_PASSWORD}")
    send_command(client, f"NICK {nick}")
    send_command(client, f"USER {user} 0 * :{realname}")
    time.sleep(0.5)
    flush_recv(client)

def join_channel(client, channel):
    send_command(client, f"JOIN {channel}")
    time.sleep(0.2)
    flush_recv(client)

def setup_environment():
    alisa = create_client()
    masha = create_client()
    oleg  = create_client()

    register_client(alisa, "Alisa", "Alisa", "Alisa the Great")
    register_client(masha, "Masha", "Masha", "Masha the Cat")
    register_client(oleg,  "Oleg",  "Oleg",  "Oleg the Bold Guy")

    return alisa, masha, oleg

def run_mode_test(test_num, test_name, client, command, expected_substr):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç:
      1. –û—á–∏—â–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ.
      2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É.
      3. –ñ–¥—ë–º.
      4. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç.
      5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ expected_substr –≤ –æ—Ç–≤–µ—Ç–µ.
      6. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—É—á–∏—Ç—ã–≤–∞—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫).
    """
    flush_recv(client)
    send_command(client, command)
    time.sleep(0.5)
    response = recv_response(client)

    print(f"{BLUE}-------------------------------------{RESET}")
    print(f"{YELLOW}Test #{test_num}: {RESET}{test_name}")
    print(f"{YELLOW}Command:          {RESET}{command}")
    print(f"{YELLOW}Expected:         {RESET}{expected_substr}")
    print(f"{YELLOW}Actual response:  {RESET}{response if response else '<no response>'}")

    success = (expected_substr in response)
    print_result(success, f"Test #{test_num}: {test_name}", response)
    print(f"{BLUE}-------------------------------------{RESET}\n")


def test_mode_command(alisa, masha, oleg):

    global failed_tests_count
    failed_tests_count = 0

    channel = "#test"
    join_channel(alisa, channel)
    join_channel(masha, channel)
    join_channel(oleg, channel)

    print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î–´ MODE")

    # [Test #1] –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    temp_client = create_client()
    run_mode_test(1, "Unregistered Client", temp_client, f"MODE {channel}", "451 :You have not registered")
    temp_client.close()

    # [Test #2] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    run_mode_test(2, "Not enough parameters", alisa, "MODE", "461 MODE :Not enough parameters")

    # [Test #3] –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª
    run_mode_test(3, "Non-existent channel", alisa, "MODE #nonexistent", "403 #nonexistent :No such channel")

    # [Test #4] –ü–µ—á–∞—Ç—å —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∂–∏–º–æ–≤
    run_mode_test(4, "Print current modes", alisa, f"MODE {channel}", f"324 Alisa {channel}")

    # [Test #5] –ù–µ–æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—ã—Ç–∞–µ—Ç—Å—è –º–µ–Ω—è—Ç—å —Ä–µ–∂–∏–º
    run_mode_test(5, "Non-operator changing mode", masha, f"MODE {channel} +i", f"482 {channel} :You're not a channel operator")

    # [Test #6] –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–µ–∂–∏–º–∞
    run_mode_test(6, "Invalid mode string", alisa, f"MODE {channel} i", "472 Alisa :Invalid mode string")

    # [Test #7] –î–æ–±–∞–≤–ª—è–µ–º +it
    run_mode_test(7, "Adding modes +it", alisa, f"MODE {channel} +it", f"MODE {channel} +it")

    # [Test #8] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ +k –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    run_mode_test(8, "Adding +k without parameter", alisa, f"MODE {channel} +k", "461 MODE :Not enough parameters for +k")

    # [Test #9] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ +k —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    run_mode_test(9, "Adding +k with parameter", alisa, f"MODE {channel} +k secretpass", f"MODE {channel} +k secretpass")

    # [Test #10] +l —Å –Ω–µ—á–∏—Å–ª–æ–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    run_mode_test(10, "Adding +l with non-numeric", alisa, f"MODE {channel} +l notanumber", "461 MODE l :Invalid limit parameter")

    # [Test #11] +l —Å –≤–∞–ª–∏–¥–Ω—ã–º —á–∏—Å–ª–æ–º
    run_mode_test(11, "Adding +l with parameter", alisa, f"MODE {channel} +l 10", f"MODE {channel} +l 10")

    # [Test #12] –£–±–∏—Ä–∞–µ–º -k
    run_mode_test(12, "Removing -k", alisa, f"MODE {channel} -k", f"MODE {channel} -k")

    # [Test #13] –£–±–∏—Ä–∞–µ–º -l
    run_mode_test(13, "Removing -l", alisa, f"MODE {channel} -l", f"MODE {channel} -l")

    # [Test #14] –î–µ–ª–∞–µ–º –ú–∞—à—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    run_mode_test(14, "Adding operator +o", alisa, f"MODE {channel} +o Masha", f"MODE {channel} +o Masha")

    # [Test #15] –°–Ω–∏–º–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∫—É —É –ú–∞—à–∏ (–Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä)
    run_mode_test(15, "Removing operator -o Masha (non-last)", alisa, f"MODE {channel} -o Masha", f"MODE {channel} -o Masha")

    # [Test #16] –°–ª–æ–∂–Ω—ã–µ —Ñ–ª–∞–≥–∏ (–≤–∞–ª–∏–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫) +ilk 15 multiKey
    run_mode_test(16, "Multiple flags +ilk (valid order)",
                  alisa,
                  f"MODE {channel} +ilk 15 multiKey",
                  f"MODE {channel} +ilk")

    # [Test #17] –°–ª–æ–∂–Ω—ã–µ —Ñ–ª–∞–≥–∏ (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫) +ilk multiKey 15
    run_mode_test(17, "Multiple flags +ilk (invalid param order)",
                  alisa,
                  f"MODE {channel} +ilk multiKey 15",
                  "461 MODE l :Invalid limit parameter")

    # [Test #18] Unsupported mode
    run_mode_test(18, "Unsupported mode", alisa, f"MODE {channel} +x", "472 Alisa x :is unknown mode char to me")

    # [Test #19] Complex mode string
    run_mode_test(19, "Complex mode string", alisa, f"MODE {channel} +ikl-t secretpass 10", f"MODE {channel} +ikl -t")

    # [Test #20] –ü—Ä–æ–≤–µ—Ä–∫–∞ -o Alisa => 482 (–ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä)
    run_mode_test(20, "Removing operator -o last", alisa, f"MODE {channel} -o Alisa", f"482 {channel} :Cannot remove the last operator")

    # [Test #21] –ë–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω—ã–π –≤–≤–æ–¥: -i+lt-k 50
    # –ü–æ –ª–æ–≥–∏–∫–µ IRC, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç: remove i, add l (param=50), add t, remove k.
    # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏—Ç, –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç –±–µ–∑ –æ—à–∏–±–∫–∏,
    # –Ω–∞–ø—Ä–∏–º–µ—Ä: MODE #test -i+lt-k 50 (–∏–ª–∏ —á—Ç–æ-—Ç–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ).
    # –Ω—É –∏–ª–∏ —Ñ–∏–≥ –∑–Ω–∞–µ—Ç, —á—Ç–æ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
    run_mode_test(21, "Jumbled flags -i+lt-k 50",
                  alisa,
                  f"MODE {channel} -i+lt-k 50",
                  f"MODE {channel} -i+lt-k 50")

    if failed_tests_count == 0:
        print(f"{GREEN}\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã MODE –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!{RESET}")
    else:
        print(f"{RED}\nüíÄ {failed_tests_count} —Ç–µ—Å—Ç(–æ–≤) MODE –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!{RESET}")

def run_tests():
    alisa, masha, oleg = setup_environment()
    test_mode_command(alisa, masha, oleg)
    alisa.close()
    masha.close()
    oleg.close()

if __name__ == "__main__":
    run_tests()
