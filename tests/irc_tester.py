#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import socket

class IRCTestClient:
    """
    –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø—Ä–æ—Å—Ç–æ–≥–æ IRC-–∫–ª–∏–µ–Ω—Ç–∞, 
    —É–º–µ–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å/–ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å—Ç—Ä–æ–∫–∏.
    """
    def __init__(self, host="127.0.0.1", port=6667, timeout=2):
        """
        –°–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ IRC-—Å–µ—Ä–≤–µ—Ä—É.
        """
        self.host = host
        self.port = port
        self.sock = None
        self._read_buffer = b""  # –±—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏ receive_line

        try:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.settimeout(timeout)
            self.sock.connect((host, port))
            print(f"[‚úÖ] Connected to {host}:{port}")
        except socket.error as e:
            print(f"[‚ùå] Connection failed: {e}")
            self.sock = None

    def send_line(self, message: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å \r\n, –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç IRC-–ø—Ä–æ—Ç–æ–∫–æ–ª.
        –ü—Ä–∏–º–µ—Ä: "JOIN #channel" => –æ—Ç–ø—Ä–∞–≤–∏—Ç "JOIN #channel\r\n" .
        """
        if not self.sock:
            print("[‚ö†Ô∏è] Not connected, cannot send data.")
            return
        data = (message + "\r\n").encode("utf-8")
        try:
            self.sock.sendall(data)
            print(f"[‚û°Ô∏è] Sent: {message}")
        except socket.error as e:
            print(f"[‚ùå] Send failed: {e}")
            self.close()

    def receive_line(self):
        """
        –ß–∏—Ç–∞–µ—Ç –û–î–ù–£ —Å—Ç—Ä–æ–∫—É (–¥–æ \n). –£–±–∏—Ä–∞–µ—Ç –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ \r\n.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É (str) –±–µ–∑ –∑–∞–≤–µ—Ä—à–∞—é—â–∏—Ö \r\n, 
        –ª–∏–±–æ None, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞/—Ç–∞–π–º–∞—É—Ç.
        """
        if not self.sock:
            return None

        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –±—É—Ñ–µ—Ä–µ –ø—Ä–∏–∑–Ω–∞–∫ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
            if b"\n" in self._read_buffer:
                line, sep, rest = self._read_buffer.partition(b"\n")
                self._read_buffer = rest
                # –£–±–∏—Ä–∞–µ–º \r –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                line = line.rstrip(b"\r")
                decoded = line.decode("utf-8", errors="replace")
                print(f"[‚¨ÖÔ∏è] Received line: {decoded}")
                return decoded

            # –ò–Ω–∞—á–µ –¥–æ—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ —Å–æ–∫–µ—Ç–∞ –ø–æ—Ä—Ü–∏—é
            try:
                chunk = self.sock.recv(1024)
                if not chunk:
                    print("[üî¥] Server closed connection.")
                    self.close()
                    return None
                self._read_buffer += chunk
            except socket.timeout:
                # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–æ —Ç–∞–π–º–∞—É—Ç–∞ ‚Äî –≤–µ—Ä–Ω—ë–º None
                return None
            except socket.error as e:
                print(f"[‚ùå] Receive failed: {e}")
                self.close()
                return None

    def auth(self, password: str, nick: str, user: str):
        """
        –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PASS, NICK, USER –ø–æ –æ—á–µ—Ä–µ–¥–∏.
        """
        if password:
            self.send_line(f"PASS {password}")
        self.send_line(f"NICK {nick}")
        # FORMALLY: USER <username> <hostname> <servername> :<realname>
        self.send_line(f"USER {user} 0 * :RealNameOf{user}")

    def close(self):
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
        """
        if self.sock:
            try:
                self.sock.close()
                print("[üî¥] Connection closed")
            except socket.error as e:
                print(f"[‚ö†Ô∏è] Error closing socket: {e}")
            finally:
                self.sock = None

    def __del__(self):
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞
        self.close()
