#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import socket
import time

class IRCTestClient:
    def __init__(self, host="127.0.0.1", port=6667, timeout=2):
        """
        –°–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ IRC-—Å–µ—Ä–≤–µ—Ä—É.
        """
        self.host = host
        self.port = port
        self.sock = None
        self._read_buffer = b""  # –ë—É—Ñ–µ—Ä –¥–ª—è –ø—Ä–∏—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö

        try:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.settimeout(timeout)
            self.sock.connect((host, port))
            print(f"[‚úÖ] Connected to {host}:{port}")
        except socket.error as e:
            print(f"[‚ùå] Connection failed: {e}")
            self.sock = None

    def send_line(self, message: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å \r\n –≤ –∫–æ–Ω—Ü–µ, –∫–∞–∫ —Ç–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç IRC-–ø—Ä–æ—Ç–æ–∫–æ–ª.
        """
        if not self.sock:
            print("[‚ö†Ô∏è] Not connected, cannot send data.")
            return
        data = (message + "\r\n").encode("utf-8")
        try:
            self.sock.sendall(data)
            print(f"[‚û°Ô∏è] Sent: {message}")
        except socket.error as e:
            print(f"[‚ùå] Send failed: {e}")
            self.close()

    def receive_line(self):
        """
        –ß–∏—Ç–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–æ \r\n –∏–ª–∏ \n. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –±–µ–∑ –∑–∞–≤–µ—Ä—à–∞—é—â–∏—Ö \r\n.
        –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
        """
        if not self.sock:
            return None

        while True:
            if b"\n" in self._read_buffer:
                line, _, rest = self._read_buffer.partition(b"\n")
                self._read_buffer = rest
                line = line.rstrip(b"\r").decode("utf-8", errors="replace")
                print(f"[‚¨ÖÔ∏è] Received line: {line}")
                return line

            try:
                chunk = self.sock.recv(1024)
                if not chunk:
                    print("[üî¥] Server closed connection.")
                    self.close()
                    return None
                self._read_buffer += chunk
            except socket.timeout:
                return None
            except socket.error as e:
                print(f"[‚ùå] Receive failed: {e}")
                self.close()
                return None

    def auth(self, password: str, nick: str, user: str):
        """
        –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PASS/NICK/USER –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ.
        """
        if password:
            self.send_line(f"PASS {password}")
        self.send_line(f"NICK {nick}")
        self.send_line(f"USER {user} 0 * :RealNameOf{user}")

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ."""
        if self.sock:
            try:
                self.sock.close()
                print("[üî¥] Connection closed")
            except socket.error as e:
                print(f"[‚ö†Ô∏è] Error closing socket: {e}")
            finally:
                self.sock = None

    def __del__(self):
        self.close()
