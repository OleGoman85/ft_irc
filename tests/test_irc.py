#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import time
import sys
from irc_tester import IRCTestClient

# –∫—Ä–∞—Å–∏–≤–æ—Å—Ç–∏
GREEN = "\033[1;32m"
RED = "\033[1;31m"
YELLOW = "\033[1;33m"
BLUE = "\033[1;34m"
RESET = "\033[0m"

def print_header(text):

    print(f"\n{YELLOW}{'='*50}\nüìå {text}\n{'='*50}{RESET}")

def print_result(success, message, received=""):
    if success:
        print(f"{GREEN}[‚úÖ] {message} PASSED!{RESET}")
    else:
        print(f"{RED}[‚ùå] {message} FAILED!{RESET}")
        if received:
            print(f"{RED}     ‚è™ Server response: {received}{RESET}")

def wait_for_line_containing(client: IRCTestClient, substring: str, timeout: float = 3.0) -> str:
    """
    –í —Ç–µ—á–µ–Ω–∏–µ 'timeout' —Å–µ–∫—É–Ω–¥ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.
    –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é 'substring', –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    end_time = time.time() + timeout
    received_lines = []
    while time.time() < end_time:
        line = client.receive_line()
        if line is None:
            time.sleep(0.1)
            continue
        received_lines.append(line)
        if substring in line:
            return line
    print(f"{RED}[‚ö†Ô∏è] Timeout! Didn't receive expected '{substring}'. Got instead: {received_lines}{RESET}")
    return None

def main():
    HOST = "127.0.0.1"
    PORT = 6667
    PASSWORD = "mypassword"

    print(f"{BLUE}\nüîç Running IRC tests...\n{RESET}")

    # 1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (Alisa)
    print_header("–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (Alisa)")
    client1 = IRCTestClient(HOST, PORT, timeout=2)
    if not client1.sock:
        print_result(False, "Client1 could not connect.")
        sys.exit(1)

    client1.auth(password=PASSWORD, nick="Alisa", user="Alisa")
    response = wait_for_line_containing(client1, "001", timeout=5.0)
    print_result(response is not None, "Client1 received '001' welcome", response)

    # 2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –∫–ª–∏–µ–Ω—Ç (Bob)
    print_header("–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (Bob)")
    client2 = IRCTestClient(HOST, PORT, timeout=2)
    if not client2.sock:
        print_result(False, "Client2 could not connect.")
        client1.close()
        sys.exit(1)

    client2.auth(password=PASSWORD, nick="Bob", user="Bob")
    response = wait_for_line_containing(client2, "001", timeout=5.0)
    print_result(response is not None, "Client2 received '001' welcome", response)

    # 3Ô∏è‚É£ Alisa JOIN #test
    print_header("–¢–µ—Å—Ç JOIN #test (Alisa)")
    client1.send_line("JOIN #test")
    response = wait_for_line_containing(client1, f":Alisa JOIN #test")
    print_result(response is not None, "Alisa successfully joined #test", response)

    # Bob JOIN #test
    print_header("–¢–µ—Å—Ç JOIN #test (Bob)")
    client2.send_line("JOIN #test")
    response = wait_for_line_containing(client2, f":Bob JOIN #test")
    print_result(response is not None, "Bob successfully joined #test", response)

    # 4Ô∏è‚É£ Bob –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∫–∞–Ω–∞–ª PRIVMSG, Alisa –¥–æ–ª–∂–Ω–∞ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å
    print_header("–¢–µ—Å—Ç PRIVMSG (Bob -> #test)")
    test_message = "Hello from Bob!"
    client2.send_line(f"PRIVMSG #test :{test_message}")
    response = wait_for_line_containing(client1, test_message, timeout=5.0)
    print_result(response is not None, "Alisa received Bob's PRIVMSG", response)

    # 5Ô∏è‚É£ Alisa –ø—ã—Ç–∞–µ—Ç—Å—è –∫–∏–∫–Ω—É—Ç—å Bob (KICK #test Bob)
    print_header("–¢–µ—Å—Ç KICK (Alisa -> Bob)")
    client1.send_line("KICK #test Bob :Bye!")

    # Bob –¥–æ–ª–∂–µ–Ω —É–≤–∏–¥–µ—Ç—å "KICK #test Bob" –∏–ª–∏ Alisa –¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫—É "482" (–Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä)
    response_kick = wait_for_line_containing(client2, "KICK #test Bob", timeout=2.0)
    response_482 = wait_for_line_containing(client1, "482", timeout=2.0)

    if response_kick:
        print_result(True, "Bob received KICK", response_kick)
    elif response_482:
        print_result(True, "Alisa received 'not an operator' error (482)", response_482)
    else:
        print_result(False, "KICK test failed! Bob didn't get kicked, and Alisa didn't get 482.")

    # 6Ô∏è‚É£ –û–±–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã—Ö–æ–¥—è—Ç (QUIT)
    print_header("–¢–µ—Å—Ç QUIT (Alisa –∏ Bob)")
    client1.send_line("QUIT :Bye!")
    client2.send_line("QUIT :Bye!")
    time.sleep(1)  # –∂–¥—ë–º-—Å –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã—Ö–æ–¥

    client1.close()
    client2.close()

    print(f"{BLUE}\nüéØ All tests completed!{RESET}\n")
    sys.exit(0)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n[INTERRUPT] Tests aborted by user.")
        sys.exit(1)
    except Exception as e:
        print(f"[ERROR] Unexpected exception: {e}")
        sys.exit(1)
