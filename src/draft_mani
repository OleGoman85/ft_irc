#include <csignal>
#include <cstdlib>
#include <iostream>

#include "Server.hpp"

// Глобальный указатель, чтобы из обработчика сигнала иметь доступ к серверу.
static Server* g_server = NULL;

// Функция завершения сервера
static void shutdownServer()
{
    if (g_server) {
        // Т.к. Server размещён динамически, вручную завершаем его работу
        // (закроем сокеты, почистим каналы, клиентов и т.д.)
        delete g_server; // вызовет ~Server(), где вы освободите ресурсы
        g_server = NULL;
    }
}

// Обработчик SIGINT
static void handleSigint(int)
{
    std::cerr << "\nCaught SIGINT! Shutting down...\n";
    shutdownServer();

    // Теперь выходим "чисто"
    std::exit(EXIT_SUCCESS);
}

int main(int argc, char* argv[])
{
    if (argc != 3) {
        std::cerr << "Usage: ./ircserv <port> <password>\n";
        return EXIT_FAILURE;
    }

    // Устанавливаем обработчик для SIGINT
    std::signal(SIGINT, handleSigint);

    try {
        // Создаём сервер динамически
        g_server = new Server(std::stoi(argv[1]), argv[2]);
        // Запускаем основной цикл
        g_server->run();
        // Если из run() выйти корректно (без Ctrl+C), тогда тоже всё почистим
        shutdownServer();
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << '\n';
        // В случае исключения — убрать утечки
        shutdownServer();
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}