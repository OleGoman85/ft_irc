#include "Invite.hpp"

#include <string>

#include "../include/Channel.hpp"
#include "../include/Server.hpp"

void handleInviteCommand(Server* server, int fd,
                         const std::vector<std::string>& tokens,
                         const std::string& /*command*/)
{
    // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if (server->_clients[fd]->authState != AUTH_REGISTERED)
    {
        std::string reply = "451 :You have not registered\r\n";
        send(fd, reply.c_str(), reply.size(), 0);
        return;
    }

    // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if (tokens.size() < 3)
    {
        std::string reply = "461 INVITE :Not enough parameters\r\n";
        send(fd, reply.c_str(), reply.size(), 0);
        return;
    }

    std::string targetNick  = tokens[1];
    std::string channelName = tokens[2];

    // 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª
    auto it = server->_channels.find(channelName);
    if (it == server->_channels.end())
    {
        std::string reply = "403 " + channelName + " :No such channel\r\n";
        send(fd, reply.c_str(), reply.size(), 0);
        return;
    }

    Channel& channel = it->second;

    // 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ –∫–∞–Ω–∞–ª–µ
    if (!channel.hasClient(fd))
    {
        std::string reply =
            "442 " + channelName + " :You're not on that channel\r\n";
        send(fd, reply.c_str(), reply.size(), 0);
        return;
    }

    // 5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–µ—Ä–∞—Ç–æ—Ä –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å (–µ—Å–ª–∏ –∫–∞–Ω–∞–ª invite-only)
    if (channel.isInviteOnly() && !channel.isOperator(fd))
    {
        std::string reply =
            "482 " + channelName + " :You're not a channel operator\r\n";
        send(fd, reply.c_str(), reply.size(), 0);
        return;
    }

    // 6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    int targetFd = -1;
    for (const auto& pair : server->_clients)
    {
        if (pair.second->nickname == targetNick)
        {
            targetFd = pair.first;
            break;
        }
    }
    if (targetFd == -1)
    {
        std::string reply = "401 " + targetNick + " :No such nick/channel\r\n";
        send(fd, reply.c_str(), reply.size(), 0);
        return;
    }

    // 7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —É–∂–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –≤ –∫–∞–Ω–∞–ª–µ
    if (channel.hasClient(targetFd))
    {
        std::string reply = "443 " + targetNick + " " + channelName +
                            " :is already on channel\r\n";
        send(fd, reply.c_str(), reply.size(), 0);
        return;
    }

    // 8Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö
    channel.inviteClient(targetFd);

    // 9Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
    std::string senderNick = server->_clients[fd]->nickname;
    std::string reply =
        "341 " + senderNick + " " + targetNick + " " + channelName + "\r\n";
    send(fd, reply.c_str(), reply.size(), 0);

    // üîü –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    std::string inviteMsg = ":" + senderNick + " INVITE " + targetNick + " :" +
                            channelName + "\r\n";
    send(targetFd, inviteMsg.c_str(), inviteMsg.size(), 0);
}
